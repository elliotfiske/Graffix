#version 120

varying vec2 UV;

uniform sampler2D tex;
uniform float time;

// some const, tweak for best look
//const float sampleDist = 0.5;
const float sampleStrength = 8.2;

uniform int effect;  // 0 = nothing, 1 = horizontal blur, 2 = radial blur, 3 = bulge
uniform float bulginess;
uniform float darkFactor;
uniform int dying;

void bulge() {
    float r = sqrt( pow((UV.x - 0.5),2.0) + pow((UV.y - 0.5), 2));
    float a = atan( UV.y - 0.5, UV.x - 0.5 );
    float rn = pow(r, bulginess) / 0.5;
    
    vec2 bulgeUV = vec2(rn * cos(a) + 0.5, rn * sin(a) + 0.5);
    
    gl_FragColor = texture2D( tex, bulgeUV );
}

void blur(bool horizontal) {
    float sampleDist = 1.49 * sin(time/0.5) + 1.49;
    
    // some sample positions
    float samples[10] =
    float[](-0.08,-0.05,-0.03,-0.02,-0.01,0.01,0.02,0.03,0.05,0.08);
    
    // 0.5,0.5 is the center of the screen
    // so substracting uv from it will result in
    // a vector pointing to the middle of the screen
    vec2 dir = 0.5 - UV;
    
    if (horizontal) {
        dir = vec2(0.5, 0);
        samples = float[](-0.05, -0.04, -0.03, -0.02, -0.01, 0.01, 0.02, 0.03, 0.04, 0.05);
        sampleDist = 0.1 * sin(time / 6) + 0.11;
    }
    
    // calculate the distance to the center of the screen
    float dist = sqrt(dir.x*dir.x + dir.y*dir.y);
    
    // normalize the direction (reuse the distance)
    dir = dir/dist;
    
    // this is the original colour of this fragment
    // using only this would result in a nonblurred version
    vec4 color = texture2D(tex,UV);
    
    vec4 sum = color;
    
    // take 10 additional blur samples in the direction towards
    // the center of the screen
    for (int i = 0; i < 10; i++)
    {
        sum += texture2D( tex, UV + dir * samples[i] * sampleDist );
    }
    
    // we have taken eleven samples
    sum *= 1.0/11.0;
    
    // weighten the blur effect with the distance to the
    // center of the screen ( further out is blurred more)
    float t = dist * sampleStrength;
    t = clamp( t ,0.0,1.0); //0 <= t <= 1
    
    gl_FragColor = mix( color, sum, t );
}

float tunnelVision() {
    float darkening = length(0.5 - UV) * darkFactor;
    return darkening;
}

void main(){
    if (effect == 0) {
        gl_FragColor = texture2D(tex, UV); // No effect
    }
    else if (effect == 1) {
        blur(true);
    }
    else if (effect == 2) {
        blur(false);
    }
    else if (effect == 3) {
        bulge();
    }
    
    gl_FragColor = mix(gl_FragColor, vec4(0, 0, 0, 1), tunnelVision());
    
    if (dying == 1) { // Make screen red, DANGA ZOOOONE
        gl_FragColor = mix(gl_FragColor, vec4(1, 0, 0, 1), tunnelVision());
    }
}
